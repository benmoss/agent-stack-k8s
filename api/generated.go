// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// AgentTokenCreateAgentTokenCreateAgentTokenCreatePayload includes the requested fields of the GraphQL type AgentTokenCreatePayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of AgentTokenCreate
type AgentTokenCreateAgentTokenCreateAgentTokenCreatePayload struct {
	AgentTokenEdge AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdge `json:"agentTokenEdge"`
}

// GetAgentTokenEdge returns AgentTokenCreateAgentTokenCreateAgentTokenCreatePayload.AgentTokenEdge, and is useful for accessing the field via an interface.
func (v *AgentTokenCreateAgentTokenCreateAgentTokenCreatePayload) GetAgentTokenEdge() AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdge {
	return v.AgentTokenEdge
}

// AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdge includes the requested fields of the GraphQL type AgentTokenEdge.
type AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdge struct {
	Node AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdgeNodeAgentToken `json:"node"`
}

// GetNode returns AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdge.Node, and is useful for accessing the field via an interface.
func (v *AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdge) GetNode() AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdgeNodeAgentToken {
	return v.Node
}

// AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdgeNodeAgentToken includes the requested fields of the GraphQL type AgentToken.
// The GraphQL type's documentation follows.
//
// A token used to connect an agent to Buildkite
type AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdgeNodeAgentToken struct {
	Id string `json:"id"`
	// The name of the agent
	Token string `json:"token"`
	// The public UUID for the agent
	Uuid string `json:"uuid"`
}

// GetId returns AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdgeNodeAgentToken.Id, and is useful for accessing the field via an interface.
func (v *AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdgeNodeAgentToken) GetId() string {
	return v.Id
}

// GetToken returns AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdgeNodeAgentToken.Token, and is useful for accessing the field via an interface.
func (v *AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdgeNodeAgentToken) GetToken() string {
	return v.Token
}

// GetUuid returns AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdgeNodeAgentToken.Uuid, and is useful for accessing the field via an interface.
func (v *AgentTokenCreateAgentTokenCreateAgentTokenCreatePayloadAgentTokenEdgeNodeAgentToken) GetUuid() string {
	return v.Uuid
}

// Autogenerated input type of AgentTokenCreate
type AgentTokenCreateInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	OrganizationID   string `json:"organizationID"`
	Description      string `json:"description"`
	Public           bool   `json:"public"`
}

// GetClientMutationId returns AgentTokenCreateInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *AgentTokenCreateInput) GetClientMutationId() string { return v.ClientMutationId }

// GetOrganizationID returns AgentTokenCreateInput.OrganizationID, and is useful for accessing the field via an interface.
func (v *AgentTokenCreateInput) GetOrganizationID() string { return v.OrganizationID }

// GetDescription returns AgentTokenCreateInput.Description, and is useful for accessing the field via an interface.
func (v *AgentTokenCreateInput) GetDescription() string { return v.Description }

// GetPublic returns AgentTokenCreateInput.Public, and is useful for accessing the field via an interface.
func (v *AgentTokenCreateInput) GetPublic() bool { return v.Public }

// AgentTokenCreateResponse is returned by AgentTokenCreate on success.
type AgentTokenCreateResponse struct {
	// Create a new agent registration token.
	AgentTokenCreate AgentTokenCreateAgentTokenCreateAgentTokenCreatePayload `json:"agentTokenCreate"`
}

// GetAgentTokenCreate returns AgentTokenCreateResponse.AgentTokenCreate, and is useful for accessing the field via an interface.
func (v *AgentTokenCreateResponse) GetAgentTokenCreate() AgentTokenCreateAgentTokenCreateAgentTokenCreatePayload {
	return v.AgentTokenCreate
}

// AgentTokenRevokeAgentTokenRevokeAgentTokenRevokePayload includes the requested fields of the GraphQL type AgentTokenRevokePayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of AgentTokenRevoke
type AgentTokenRevokeAgentTokenRevokeAgentTokenRevokePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
}

// GetClientMutationId returns AgentTokenRevokeAgentTokenRevokeAgentTokenRevokePayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *AgentTokenRevokeAgentTokenRevokeAgentTokenRevokePayload) GetClientMutationId() string {
	return v.ClientMutationId
}

// Autogenerated input type of AgentTokenRevoke
type AgentTokenRevokeInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	Id               string `json:"id"`
	// The reason why this agent token should be revoked
	Reason string `json:"reason"`
}

// GetClientMutationId returns AgentTokenRevokeInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *AgentTokenRevokeInput) GetClientMutationId() string { return v.ClientMutationId }

// GetId returns AgentTokenRevokeInput.Id, and is useful for accessing the field via an interface.
func (v *AgentTokenRevokeInput) GetId() string { return v.Id }

// GetReason returns AgentTokenRevokeInput.Reason, and is useful for accessing the field via an interface.
func (v *AgentTokenRevokeInput) GetReason() string { return v.Reason }

// AgentTokenRevokeResponse is returned by AgentTokenRevoke on success.
type AgentTokenRevokeResponse struct {
	// Revoke an agent registration token.
	AgentTokenRevoke AgentTokenRevokeAgentTokenRevokeAgentTokenRevokePayload `json:"agentTokenRevoke"`
}

// GetAgentTokenRevoke returns AgentTokenRevokeResponse.AgentTokenRevoke, and is useful for accessing the field via an interface.
func (v *AgentTokenRevokeResponse) GetAgentTokenRevoke() AgentTokenRevokeAgentTokenRevokeAgentTokenRevokePayload {
	return v.AgentTokenRevoke
}

// Author for a build
type BuildAuthorInput struct {
	// The name for the build author
	Name string `json:"name"`
	// The email for the build author
	Email string `json:"email"`
}

// GetName returns BuildAuthorInput.Name, and is useful for accessing the field via an interface.
func (v *BuildAuthorInput) GetName() string { return v.Name }

// GetEmail returns BuildAuthorInput.Email, and is useful for accessing the field via an interface.
func (v *BuildAuthorInput) GetEmail() string { return v.Email }

// BuildCancelBuildCancelBuildCancelPayload includes the requested fields of the GraphQL type BuildCancelPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of BuildCancel
type BuildCancelBuildCancelBuildCancelPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
}

// GetClientMutationId returns BuildCancelBuildCancelBuildCancelPayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *BuildCancelBuildCancelBuildCancelPayload) GetClientMutationId() string {
	return v.ClientMutationId
}

// Autogenerated input type of BuildCancel
type BuildCancelInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	Id               string `json:"id"`
}

// GetClientMutationId returns BuildCancelInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *BuildCancelInput) GetClientMutationId() string { return v.ClientMutationId }

// GetId returns BuildCancelInput.Id, and is useful for accessing the field via an interface.
func (v *BuildCancelInput) GetId() string { return v.Id }

// BuildCancelResponse is returned by BuildCancel on success.
type BuildCancelResponse struct {
	// Cancel a build.
	BuildCancel BuildCancelBuildCancelBuildCancelPayload `json:"buildCancel"`
}

// GetBuildCancel returns BuildCancelResponse.BuildCancel, and is useful for accessing the field via an interface.
func (v *BuildCancelResponse) GetBuildCancel() BuildCancelBuildCancelBuildCancelPayload {
	return v.BuildCancel
}

// BuildCreateBuildCreateBuildCreatePayload includes the requested fields of the GraphQL type BuildCreatePayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of BuildCreate
type BuildCreateBuildCreateBuildCreatePayload struct {
	Build BuildCreateBuildCreateBuildCreatePayloadBuild `json:"build"`
}

// GetBuild returns BuildCreateBuildCreateBuildCreatePayload.Build, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayload) GetBuild() BuildCreateBuildCreateBuildCreatePayloadBuild {
	return v.Build
}

// BuildCreateBuildCreateBuildCreatePayloadBuild includes the requested fields of the GraphQL type Build.
// The GraphQL type's documentation follows.
//
// A build from a pipeline
type BuildCreateBuildCreateBuildCreatePayloadBuild struct {
	// The UUID for the build
	Uuid string `json:"uuid"`
	Id   string `json:"id"`
	// The number of the build
	Number int                                                            `json:"number"`
	Jobs   BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnection `json:"jobs"`
}

// GetUuid returns BuildCreateBuildCreateBuildCreatePayloadBuild.Uuid, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayloadBuild) GetUuid() string { return v.Uuid }

// GetId returns BuildCreateBuildCreateBuildCreatePayloadBuild.Id, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayloadBuild) GetId() string { return v.Id }

// GetNumber returns BuildCreateBuildCreateBuildCreatePayloadBuild.Number, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayloadBuild) GetNumber() int { return v.Number }

// GetJobs returns BuildCreateBuildCreateBuildCreatePayloadBuild.Jobs, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayloadBuild) GetJobs() BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnection {
	return v.Jobs
}

// BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnection includes the requested fields of the GraphQL type JobConnection.
type BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnection struct {
	Edges []BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge `json:"edges"`
}

// GetEdges returns BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnection.Edges, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnection) GetEdges() []BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge {
	return v.Edges
}

// BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge includes the requested fields of the GraphQL type JobEdge.
type BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge struct {
	Node Job `json:"-"`
}

// GetNode returns BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge.Node, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge) GetNode() Job {
	return v.Node
}

func (v *BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalJob(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalBuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge struct {
	Node json.RawMessage `json:"node"`
}

func (v *BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge) __premarshalJSON() (*__premarshalBuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge, error) {
	var retval __premarshalBuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge

	{

		dst := &retval.Node
		src := v.Node
		var err error
		*dst, err = __marshalJob(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal BuildCreateBuildCreateBuildCreatePayloadBuildJobsJobConnectionEdgesJobEdge.Node: %w", err)
		}
	}
	return &retval, nil
}

// Autogenerated input type of BuildCreate
type BuildCreateInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	// The GraphQL ID of the pipeline you want to create a build on
	PipelineID string `json:"pipelineID"`
	// The message that is displayed on the build
	Message string `json:"message"`
	// The commit for the build
	Commit string `json:"commit"`
	// The branch for the build
	Branch string `json:"branch"`
	// Environment variables used for the build
	Env      []string             `json:"env"`
	MetaData []BuildMetaDataInput `json:"metaData"`
	Author   BuildAuthorInput     `json:"author"`
}

// GetClientMutationId returns BuildCreateInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetClientMutationId() string { return v.ClientMutationId }

// GetPipelineID returns BuildCreateInput.PipelineID, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetPipelineID() string { return v.PipelineID }

// GetMessage returns BuildCreateInput.Message, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetMessage() string { return v.Message }

// GetCommit returns BuildCreateInput.Commit, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetCommit() string { return v.Commit }

// GetBranch returns BuildCreateInput.Branch, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetBranch() string { return v.Branch }

// GetEnv returns BuildCreateInput.Env, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetEnv() []string { return v.Env }

// GetMetaData returns BuildCreateInput.MetaData, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetMetaData() []BuildMetaDataInput { return v.MetaData }

// GetAuthor returns BuildCreateInput.Author, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetAuthor() BuildAuthorInput { return v.Author }

// BuildCreateResponse is returned by BuildCreate on success.
type BuildCreateResponse struct {
	// Create a build.
	BuildCreate BuildCreateBuildCreateBuildCreatePayload `json:"buildCreate"`
}

// GetBuildCreate returns BuildCreateResponse.BuildCreate, and is useful for accessing the field via an interface.
func (v *BuildCreateResponse) GetBuildCreate() BuildCreateBuildCreateBuildCreatePayload {
	return v.BuildCreate
}

// Meta-data key/value pairs for a build
type BuildMetaDataInput struct {
	// The key for this meta-data item
	Key string `json:"key"`
	// The value for this meta-data item
	Value string `json:"value"`
}

// GetKey returns BuildMetaDataInput.Key, and is useful for accessing the field via an interface.
func (v *BuildMetaDataInput) GetKey() string { return v.Key }

// GetValue returns BuildMetaDataInput.Value, and is useful for accessing the field via an interface.
func (v *BuildMetaDataInput) GetValue() string { return v.Value }

// All the possible states a build can be in
type BuildStates string

const (
	// The build was skipped
	BuildStatesSkipped BuildStates = "SKIPPED"
	// The build is currently being created
	BuildStatesCreating BuildStates = "CREATING"
	// The build has yet to start running jobs
	BuildStatesScheduled BuildStates = "SCHEDULED"
	// The build is currently running jobs
	BuildStatesRunning BuildStates = "RUNNING"
	// The build passed
	BuildStatesPassed BuildStates = "PASSED"
	// The build failed
	BuildStatesFailed BuildStates = "FAILED"
	// The build is failing
	BuildStatesFailing BuildStates = "FAILING"
	// The build is currently being canceled
	BuildStatesCanceling BuildStates = "CANCELING"
	// The build was canceled
	BuildStatesCanceled BuildStates = "CANCELED"
	// The build is blocked
	BuildStatesBlocked BuildStates = "BLOCKED"
	// The build wasn't run
	BuildStatesNotRun BuildStates = "NOT_RUN"
)

// CommandJob includes the GraphQL fields of JobTypeCommand requested by the fragment CommandJob.
// The GraphQL type's documentation follows.
//
// A type of job that runs a command on an agent
type CommandJob struct {
	// The UUID for this job
	Uuid string `json:"uuid"`
	// Environment variables for this job
	Env []string `json:"env"`
	// The label of the job
	Label string `json:"label"`
	// The state of the job
	State JobStates `json:"state"`
	// The ruleset used to find an agent to run this job
	AgentQueryRules []string `json:"agentQueryRules"`
	// The exit status returned by the command on the agent
	ExitStatus string `json:"exitStatus"`
	// The time when the job became scheduled for running
	ScheduledAt time.Time `json:"scheduledAt"`
	// The agent that is running the job
	Agent CommandJobAgent `json:"agent"`
}

// GetUuid returns CommandJob.Uuid, and is useful for accessing the field via an interface.
func (v *CommandJob) GetUuid() string { return v.Uuid }

// GetEnv returns CommandJob.Env, and is useful for accessing the field via an interface.
func (v *CommandJob) GetEnv() []string { return v.Env }

// GetLabel returns CommandJob.Label, and is useful for accessing the field via an interface.
func (v *CommandJob) GetLabel() string { return v.Label }

// GetState returns CommandJob.State, and is useful for accessing the field via an interface.
func (v *CommandJob) GetState() JobStates { return v.State }

// GetAgentQueryRules returns CommandJob.AgentQueryRules, and is useful for accessing the field via an interface.
func (v *CommandJob) GetAgentQueryRules() []string { return v.AgentQueryRules }

// GetExitStatus returns CommandJob.ExitStatus, and is useful for accessing the field via an interface.
func (v *CommandJob) GetExitStatus() string { return v.ExitStatus }

// GetScheduledAt returns CommandJob.ScheduledAt, and is useful for accessing the field via an interface.
func (v *CommandJob) GetScheduledAt() time.Time { return v.ScheduledAt }

// GetAgent returns CommandJob.Agent, and is useful for accessing the field via an interface.
func (v *CommandJob) GetAgent() CommandJobAgent { return v.Agent }

// CommandJobAgent includes the requested fields of the GraphQL type Agent.
// The GraphQL type's documentation follows.
//
// An agent
type CommandJobAgent struct {
	// The name of the agent
	Name string `json:"name"`
}

// GetName returns CommandJobAgent.Name, and is useful for accessing the field via an interface.
func (v *CommandJobAgent) GetName() string { return v.Name }

// GetBuildBuild includes the requested fields of the GraphQL type Build.
// The GraphQL type's documentation follows.
//
// A build from a pipeline
type GetBuildBuild struct {
	// The current state of the build
	State BuildStates `json:"state"`
}

// GetState returns GetBuildBuild.State, and is useful for accessing the field via an interface.
func (v *GetBuildBuild) GetState() BuildStates { return v.State }

// GetBuildResponse is returned by GetBuild on success.
type GetBuildResponse struct {
	// Find a build by its slug or UUID
	Build GetBuildBuild `json:"build"`
}

// GetBuild returns GetBuildResponse.Build, and is useful for accessing the field via an interface.
func (v *GetBuildResponse) GetBuild() GetBuildBuild { return v.Build }

// GetBuildsPipeline includes the requested fields of the GraphQL type Pipeline.
// The GraphQL type's documentation follows.
//
// A pipeline
type GetBuildsPipeline struct {
	// Returns the builds for this pipeline
	Builds GetBuildsPipelineBuildsBuildConnection `json:"builds"`
}

// GetBuilds returns GetBuildsPipeline.Builds, and is useful for accessing the field via an interface.
func (v *GetBuildsPipeline) GetBuilds() GetBuildsPipelineBuildsBuildConnection { return v.Builds }

// GetBuildsPipelineBuildsBuildConnection includes the requested fields of the GraphQL type BuildConnection.
type GetBuildsPipelineBuildsBuildConnection struct {
	Edges []GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdge `json:"edges"`
}

// GetEdges returns GetBuildsPipelineBuildsBuildConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetBuildsPipelineBuildsBuildConnection) GetEdges() []GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdge {
	return v.Edges
}

// GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdge includes the requested fields of the GraphQL type BuildEdge.
type GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdge struct {
	Node GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild `json:"node"`
}

// GetNode returns GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdge.Node, and is useful for accessing the field via an interface.
func (v *GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdge) GetNode() GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild {
	return v.Node
}

// GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild includes the requested fields of the GraphQL type Build.
// The GraphQL type's documentation follows.
//
// A build from a pipeline
type GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild struct {
	Id string `json:"id"`
}

// GetId returns GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild.Id, and is useful for accessing the field via an interface.
func (v *GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild) GetId() string { return v.Id }

// GetBuildsResponse is returned by GetBuilds on success.
type GetBuildsResponse struct {
	// Find a pipeline by its slug
	Pipeline GetBuildsPipeline `json:"pipeline"`
}

// GetPipeline returns GetBuildsResponse.Pipeline, and is useful for accessing the field via an interface.
func (v *GetBuildsResponse) GetPipeline() GetBuildsPipeline { return v.Pipeline }

// GetOrganizationOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An organization
type GetOrganizationOrganization struct {
	Id string `json:"id"`
}

// GetId returns GetOrganizationOrganization.Id, and is useful for accessing the field via an interface.
func (v *GetOrganizationOrganization) GetId() string { return v.Id }

// GetOrganizationResponse is returned by GetOrganization on success.
type GetOrganizationResponse struct {
	// Find an organization by its slug
	Organization GetOrganizationOrganization `json:"organization"`
}

// GetOrganization returns GetOrganizationResponse.Organization, and is useful for accessing the field via an interface.
func (v *GetOrganizationResponse) GetOrganization() GetOrganizationOrganization {
	return v.Organization
}

// GetScheduledBuildsPipeline includes the requested fields of the GraphQL type Pipeline.
// The GraphQL type's documentation follows.
//
// A pipeline
type GetScheduledBuildsPipeline struct {
	Id   *string                                     `json:"id"`
	Jobs GetScheduledBuildsPipelineJobsJobConnection `json:"jobs"`
}

// GetId returns GetScheduledBuildsPipeline.Id, and is useful for accessing the field via an interface.
func (v *GetScheduledBuildsPipeline) GetId() *string { return v.Id }

// GetJobs returns GetScheduledBuildsPipeline.Jobs, and is useful for accessing the field via an interface.
func (v *GetScheduledBuildsPipeline) GetJobs() GetScheduledBuildsPipelineJobsJobConnection {
	return v.Jobs
}

// GetScheduledBuildsPipelineJobsJobConnection includes the requested fields of the GraphQL type JobConnection.
type GetScheduledBuildsPipelineJobsJobConnection struct {
	Count int                                                       `json:"count"`
	Edges []GetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge `json:"edges"`
}

// GetCount returns GetScheduledBuildsPipelineJobsJobConnection.Count, and is useful for accessing the field via an interface.
func (v *GetScheduledBuildsPipelineJobsJobConnection) GetCount() int { return v.Count }

// GetEdges returns GetScheduledBuildsPipelineJobsJobConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetScheduledBuildsPipelineJobsJobConnection) GetEdges() []GetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge {
	return v.Edges
}

// GetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge includes the requested fields of the GraphQL type JobEdge.
type GetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge struct {
	Node Job `json:"-"`
}

// GetNode returns GetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge.Node, and is useful for accessing the field via an interface.
func (v *GetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge) GetNode() Job { return v.Node }

func (v *GetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalJob(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal GetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge struct {
	Node json.RawMessage `json:"node"`
}

func (v *GetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge) __premarshalJSON() (*__premarshalGetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge, error) {
	var retval __premarshalGetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge

	{

		dst := &retval.Node
		src := v.Node
		var err error
		*dst, err = __marshalJob(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal GetScheduledBuildsPipelineJobsJobConnectionEdgesJobEdge.Node: %w", err)
		}
	}
	return &retval, nil
}

// GetScheduledBuildsResponse is returned by GetScheduledBuilds on success.
type GetScheduledBuildsResponse struct {
	// Find a pipeline by its slug
	Pipeline GetScheduledBuildsPipeline `json:"pipeline"`
}

// GetPipeline returns GetScheduledBuildsResponse.Pipeline, and is useful for accessing the field via an interface.
func (v *GetScheduledBuildsResponse) GetPipeline() GetScheduledBuildsPipeline { return v.Pipeline }

// Job includes the GraphQL fields of Job requested by the fragment Job.
// The GraphQL type's documentation follows.
//
// # Kinds of jobs that can exist on a build
//
// Job is implemented by the following types:
// JobJobTypeBlock
// JobJobTypeCommand
// JobJobTypeTrigger
// JobJobTypeWait
type Job interface {
	implementsGraphQLInterfaceJob()
}

func (v *JobJobTypeBlock) implementsGraphQLInterfaceJob()   {}
func (v *JobJobTypeCommand) implementsGraphQLInterfaceJob() {}
func (v *JobJobTypeTrigger) implementsGraphQLInterfaceJob() {}
func (v *JobJobTypeWait) implementsGraphQLInterfaceJob()    {}

func __unmarshalJob(b []byte, v *Job) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "JobTypeBlock":
		*v = new(JobJobTypeBlock)
		return json.Unmarshal(b, *v)
	case "JobTypeCommand":
		*v = new(JobJobTypeCommand)
		return json.Unmarshal(b, *v)
	case "JobTypeTrigger":
		*v = new(JobJobTypeTrigger)
		return json.Unmarshal(b, *v)
	case "JobTypeWait":
		*v = new(JobJobTypeWait)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Job.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for Job: "%v"`, tn.TypeName)
	}
}

func __marshalJob(v *Job) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *JobJobTypeBlock:
		typename = "JobTypeBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*JobJobTypeBlock
		}{typename, v}
		return json.Marshal(result)
	case *JobJobTypeCommand:
		typename = "JobTypeCommand"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalJobJobTypeCommand
		}{typename, premarshaled}
		return json.Marshal(result)
	case *JobJobTypeTrigger:
		typename = "JobTypeTrigger"

		result := struct {
			TypeName string `json:"__typename"`
			*JobJobTypeTrigger
		}{typename, v}
		return json.Marshal(result)
	case *JobJobTypeWait:
		typename = "JobTypeWait"

		result := struct {
			TypeName string `json:"__typename"`
			*JobJobTypeWait
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for Job: "%T"`, v)
	}
}

// Job includes the GraphQL fields of JobTypeBlock requested by the fragment Job.
// The GraphQL type's documentation follows.
//
// Kinds of jobs that can exist on a build
type JobJobTypeBlock struct {
}

// Job includes the GraphQL fields of JobTypeCommand requested by the fragment Job.
// The GraphQL type's documentation follows.
//
// Kinds of jobs that can exist on a build
type JobJobTypeCommand struct {
	CommandJob `json:"-"`
}

// GetUuid returns JobJobTypeCommand.Uuid, and is useful for accessing the field via an interface.
func (v *JobJobTypeCommand) GetUuid() string { return v.CommandJob.Uuid }

// GetEnv returns JobJobTypeCommand.Env, and is useful for accessing the field via an interface.
func (v *JobJobTypeCommand) GetEnv() []string { return v.CommandJob.Env }

// GetLabel returns JobJobTypeCommand.Label, and is useful for accessing the field via an interface.
func (v *JobJobTypeCommand) GetLabel() string { return v.CommandJob.Label }

// GetState returns JobJobTypeCommand.State, and is useful for accessing the field via an interface.
func (v *JobJobTypeCommand) GetState() JobStates { return v.CommandJob.State }

// GetAgentQueryRules returns JobJobTypeCommand.AgentQueryRules, and is useful for accessing the field via an interface.
func (v *JobJobTypeCommand) GetAgentQueryRules() []string { return v.CommandJob.AgentQueryRules }

// GetExitStatus returns JobJobTypeCommand.ExitStatus, and is useful for accessing the field via an interface.
func (v *JobJobTypeCommand) GetExitStatus() string { return v.CommandJob.ExitStatus }

// GetScheduledAt returns JobJobTypeCommand.ScheduledAt, and is useful for accessing the field via an interface.
func (v *JobJobTypeCommand) GetScheduledAt() time.Time { return v.CommandJob.ScheduledAt }

// GetAgent returns JobJobTypeCommand.Agent, and is useful for accessing the field via an interface.
func (v *JobJobTypeCommand) GetAgent() CommandJobAgent { return v.CommandJob.Agent }

func (v *JobJobTypeCommand) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*JobJobTypeCommand
		graphql.NoUnmarshalJSON
	}
	firstPass.JobJobTypeCommand = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommandJob)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalJobJobTypeCommand struct {
	Uuid string `json:"uuid"`

	Env []string `json:"env"`

	Label string `json:"label"`

	State JobStates `json:"state"`

	AgentQueryRules []string `json:"agentQueryRules"`

	ExitStatus string `json:"exitStatus"`

	ScheduledAt time.Time `json:"scheduledAt"`

	Agent CommandJobAgent `json:"agent"`
}

func (v *JobJobTypeCommand) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *JobJobTypeCommand) __premarshalJSON() (*__premarshalJobJobTypeCommand, error) {
	var retval __premarshalJobJobTypeCommand

	retval.Uuid = v.CommandJob.Uuid
	retval.Env = v.CommandJob.Env
	retval.Label = v.CommandJob.Label
	retval.State = v.CommandJob.State
	retval.AgentQueryRules = v.CommandJob.AgentQueryRules
	retval.ExitStatus = v.CommandJob.ExitStatus
	retval.ScheduledAt = v.CommandJob.ScheduledAt
	retval.Agent = v.CommandJob.Agent
	return &retval, nil
}

// Job includes the GraphQL fields of JobTypeTrigger requested by the fragment Job.
// The GraphQL type's documentation follows.
//
// Kinds of jobs that can exist on a build
type JobJobTypeTrigger struct {
}

// Job includes the GraphQL fields of JobTypeWait requested by the fragment Job.
// The GraphQL type's documentation follows.
//
// Kinds of jobs that can exist on a build
type JobJobTypeWait struct {
}

// All the possible states a job can be in
type JobStates string

const (
	// The job has just been created and doesn't have a state yet
	JobStatesPending JobStates = "PENDING"
	// The job is waiting on a `wait` step to finish
	JobStatesWaiting JobStates = "WAITING"
	// The job was in a `WAITING` state when the build failed
	JobStatesWaitingFailed JobStates = "WAITING_FAILED"
	// The job is waiting on a `block` step to finish
	JobStatesBlocked JobStates = "BLOCKED"
	// The job was in a `BLOCKED` state when the build failed
	JobStatesBlockedFailed JobStates = "BLOCKED_FAILED"
	// This `block` job has been manually unblocked
	JobStatesUnblocked JobStates = "UNBLOCKED"
	// This `block` job was in an `UNBLOCKED` state when the build failed
	JobStatesUnblockedFailed JobStates = "UNBLOCKED_FAILED"
	// The job is waiting on a concurrency group check before becoming either `LIMITED` or `SCHEDULED`
	JobStatesLimiting JobStates = "LIMITING"
	// The job is waiting for jobs with the same concurrency group to finish
	JobStatesLimited JobStates = "LIMITED"
	// The job is scheduled and waiting for an agent
	JobStatesScheduled JobStates = "SCHEDULED"
	// The job has been assigned to an agent, and it's waiting for it to accept
	JobStatesAssigned JobStates = "ASSIGNED"
	// The job was accepted by the agent, and now it's waiting to start running
	JobStatesAccepted JobStates = "ACCEPTED"
	// The job is running
	JobStatesRunning JobStates = "RUNNING"
	// The job has finished
	JobStatesFinished JobStates = "FINISHED"
	// The job is currently canceling
	JobStatesCanceling JobStates = "CANCELING"
	// The job was canceled
	JobStatesCanceled JobStates = "CANCELED"
	// The job is timing out for taking too long
	JobStatesTimingOut JobStates = "TIMING_OUT"
	// The job timed out
	JobStatesTimedOut JobStates = "TIMED_OUT"
	// The job was skipped
	JobStatesSkipped JobStates = "SKIPPED"
	// The jobs configuration means that it can't be run
	JobStatesBroken JobStates = "BROKEN"
	// The job expired before it was started on an agent
	JobStatesExpired JobStates = "EXPIRED"
)

// The access levels that can be assigned to a pipeline
type PipelineAccessLevels string

const (
	// Allows edits, builds and reads
	PipelineAccessLevelsManageBuildAndRead PipelineAccessLevels = "MANAGE_BUILD_AND_READ"
	// Allows builds and read only
	PipelineAccessLevelsBuildAndRead PipelineAccessLevels = "BUILD_AND_READ"
	// Read only - no builds or edits
	PipelineAccessLevelsReadOnly PipelineAccessLevels = "READ_ONLY"
)

// Autogenerated input type of PipelineCreate
type PipelineCreateInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId,omitempty"`
	OrganizationId   string `json:"organizationId,omitempty"`
	// The name of the pipeline.
	Name string `json:"name,omitempty"`
	// A description of this pipeline.
	Description string `json:"description,omitempty"`
	// The visibility of the pipeline, either PUBLIC or PRIVATE.
	Visibility PipelineVisibility `json:"visibility,omitempty"`
	// A source code repository that will back this pipeline
	Repository PipelineRepositoryInput `json:"repository,omitempty"`
	// Steps used by this pipeline defined as YAML
	Steps PipelineStepsInput `json:"steps,omitempty"`
	// If intermediate builds should be skipped as new builds are created
	SkipIntermediateBuilds bool `json:"skipIntermediateBuilds,omitempty"`
	// A branch filter to scope which builds this is applied to
	SkipIntermediateBuildsBranchFilter string `json:"skipIntermediateBuildsBranchFilter,omitempty"`
	// If intermediate builds should be canceled as new builds are created
	CancelIntermediateBuilds bool `json:"cancelIntermediateBuilds,omitempty"`
	// A branch filter to scope which builds this is applied to
	CancelIntermediateBuildsBranchFilter string `json:"cancelIntermediateBuildsBranchFilter,omitempty"`
	// If existing builds can be rebuilt as new builds.
	AllowRebuilds bool `json:"allowRebuilds,omitempty"`
	// Which teams this pipeline should be assigned to
	Teams []PipelineTeamAssignmentInput `json:"teams,omitempty"`
	// The default branch used to show statistics about the build
	DefaultBranch string `json:"defaultBranch,omitempty"`
	// The initial build number to use in the sequence
	NextBuildNumber int `json:"nextBuildNumber,omitempty"`
	// The GraphQL ID of the cluster you want to use for the pipeline
	ClusterId string `json:"clusterId,omitempty"`
	// Tags you want this pipeline to have
	Tags []PipelineTagInput `json:"tags,omitempty"`
	// A branch filter pattern to limit which pushed branches trigger builds on this pipeline.
	BranchConfiguration string `json:"branchConfiguration,omitempty"`
}

// GetClientMutationId returns PipelineCreateInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetClientMutationId() string { return v.ClientMutationId }

// GetOrganizationId returns PipelineCreateInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetOrganizationId() string { return v.OrganizationId }

// GetName returns PipelineCreateInput.Name, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetName() string { return v.Name }

// GetDescription returns PipelineCreateInput.Description, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetDescription() string { return v.Description }

// GetVisibility returns PipelineCreateInput.Visibility, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetVisibility() PipelineVisibility { return v.Visibility }

// GetRepository returns PipelineCreateInput.Repository, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetRepository() PipelineRepositoryInput { return v.Repository }

// GetSteps returns PipelineCreateInput.Steps, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetSteps() PipelineStepsInput { return v.Steps }

// GetSkipIntermediateBuilds returns PipelineCreateInput.SkipIntermediateBuilds, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetSkipIntermediateBuilds() bool { return v.SkipIntermediateBuilds }

// GetSkipIntermediateBuildsBranchFilter returns PipelineCreateInput.SkipIntermediateBuildsBranchFilter, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetSkipIntermediateBuildsBranchFilter() string {
	return v.SkipIntermediateBuildsBranchFilter
}

// GetCancelIntermediateBuilds returns PipelineCreateInput.CancelIntermediateBuilds, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetCancelIntermediateBuilds() bool { return v.CancelIntermediateBuilds }

// GetCancelIntermediateBuildsBranchFilter returns PipelineCreateInput.CancelIntermediateBuildsBranchFilter, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetCancelIntermediateBuildsBranchFilter() string {
	return v.CancelIntermediateBuildsBranchFilter
}

// GetAllowRebuilds returns PipelineCreateInput.AllowRebuilds, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetAllowRebuilds() bool { return v.AllowRebuilds }

// GetTeams returns PipelineCreateInput.Teams, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetTeams() []PipelineTeamAssignmentInput { return v.Teams }

// GetDefaultBranch returns PipelineCreateInput.DefaultBranch, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetDefaultBranch() string { return v.DefaultBranch }

// GetNextBuildNumber returns PipelineCreateInput.NextBuildNumber, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetNextBuildNumber() int { return v.NextBuildNumber }

// GetClusterId returns PipelineCreateInput.ClusterId, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetClusterId() string { return v.ClusterId }

// GetTags returns PipelineCreateInput.Tags, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetTags() []PipelineTagInput { return v.Tags }

// GetBranchConfiguration returns PipelineCreateInput.BranchConfiguration, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetBranchConfiguration() string { return v.BranchConfiguration }

// PipelineCreatePipelineCreatePipelineCreatePayload includes the requested fields of the GraphQL type PipelineCreatePayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of PipelineCreate
type PipelineCreatePipelineCreatePipelineCreatePayload struct {
	Pipeline PipelineCreatePipelineCreatePipelineCreatePayloadPipeline `json:"pipeline"`
}

// GetPipeline returns PipelineCreatePipelineCreatePipelineCreatePayload.Pipeline, and is useful for accessing the field via an interface.
func (v *PipelineCreatePipelineCreatePipelineCreatePayload) GetPipeline() PipelineCreatePipelineCreatePipelineCreatePayloadPipeline {
	return v.Pipeline
}

// PipelineCreatePipelineCreatePipelineCreatePayloadPipeline includes the requested fields of the GraphQL type Pipeline.
// The GraphQL type's documentation follows.
//
// A pipeline
type PipelineCreatePipelineCreatePipelineCreatePayloadPipeline struct {
	Id string `json:"id"`
	// The name of the pipeline
	Name string `json:"name"`
}

// GetId returns PipelineCreatePipelineCreatePipelineCreatePayloadPipeline.Id, and is useful for accessing the field via an interface.
func (v *PipelineCreatePipelineCreatePipelineCreatePayloadPipeline) GetId() string { return v.Id }

// GetName returns PipelineCreatePipelineCreatePipelineCreatePayloadPipeline.Name, and is useful for accessing the field via an interface.
func (v *PipelineCreatePipelineCreatePipelineCreatePayloadPipeline) GetName() string { return v.Name }

// PipelineCreateResponse is returned by PipelineCreate on success.
type PipelineCreateResponse struct {
	// Create a pipeline.
	PipelineCreate PipelineCreatePipelineCreatePipelineCreatePayload `json:"pipelineCreate"`
}

// GetPipelineCreate returns PipelineCreateResponse.PipelineCreate, and is useful for accessing the field via an interface.
func (v *PipelineCreateResponse) GetPipelineCreate() PipelineCreatePipelineCreatePipelineCreatePayload {
	return v.PipelineCreate
}

// Autogenerated input type of PipelineDelete
type PipelineDeleteInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	Id               string `json:"id"`
}

// GetClientMutationId returns PipelineDeleteInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *PipelineDeleteInput) GetClientMutationId() string { return v.ClientMutationId }

// GetId returns PipelineDeleteInput.Id, and is useful for accessing the field via an interface.
func (v *PipelineDeleteInput) GetId() string { return v.Id }

// PipelineDeletePipelineDeletePipelineDeletePayload includes the requested fields of the GraphQL type PipelineDeletePayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of PipelineDelete
type PipelineDeletePipelineDeletePipelineDeletePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
}

// GetClientMutationId returns PipelineDeletePipelineDeletePipelineDeletePayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *PipelineDeletePipelineDeletePipelineDeletePayload) GetClientMutationId() string {
	return v.ClientMutationId
}

// PipelineDeleteResponse is returned by PipelineDelete on success.
type PipelineDeleteResponse struct {
	// Delete a pipeline.
	PipelineDelete PipelineDeletePipelineDeletePipelineDeletePayload `json:"pipelineDelete"`
}

// GetPipelineDelete returns PipelineDeleteResponse.PipelineDelete, and is useful for accessing the field via an interface.
func (v *PipelineDeleteResponse) GetPipelineDelete() PipelineDeletePipelineDeletePipelineDeletePayload {
	return v.PipelineDelete
}

// Repository information for a pipeline
type PipelineRepositoryInput struct {
	// The remote URL for this repository i.e. git@github.com:foo/bar.git
	Url string `json:"url,omitempty"`
}

// GetUrl returns PipelineRepositoryInput.Url, and is useful for accessing the field via an interface.
func (v *PipelineRepositoryInput) GetUrl() string { return v.Url }

// Step definition for a pipeline
type PipelineStepsInput struct {
	// A YAML representation of the steps in this pipeline. This is formatted the same as `buildkite-agent pipeline upload
	Yaml string `json:"yaml,omitempty"`
}

// GetYaml returns PipelineStepsInput.Yaml, and is useful for accessing the field via an interface.
func (v *PipelineStepsInput) GetYaml() string { return v.Yaml }

// Tag associated with a pipeline
type PipelineTagInput struct {
	// The label of this tag
	Label string `json:"label,omitempty"`
}

// GetLabel returns PipelineTagInput.Label, and is useful for accessing the field via an interface.
func (v *PipelineTagInput) GetLabel() string { return v.Label }

// Used to assign teams to pipelines
type PipelineTeamAssignmentInput struct {
	// The ID of the team you want to be assigned
	Id string `json:"id,omitempty"`
	// The access level members within the team have to the pipeline
	AccessLevel PipelineAccessLevels `json:"accessLevel,omitempty"`
}

// GetId returns PipelineTeamAssignmentInput.Id, and is useful for accessing the field via an interface.
func (v *PipelineTeamAssignmentInput) GetId() string { return v.Id }

// GetAccessLevel returns PipelineTeamAssignmentInput.AccessLevel, and is useful for accessing the field via an interface.
func (v *PipelineTeamAssignmentInput) GetAccessLevel() PipelineAccessLevels { return v.AccessLevel }

// The visibility of the pipeline
type PipelineVisibility string

const (
	// The pipeline is public
	PipelineVisibilityPublic PipelineVisibility = "PUBLIC"
	// The pipeline is private
	PipelineVisibilityPrivate PipelineVisibility = "PRIVATE"
)

// SearchPipelinesOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An organization
type SearchPipelinesOrganization struct {
	// Return all the pipelines the current user has access to for this organization
	Pipelines SearchPipelinesOrganizationPipelinesPipelineConnection `json:"pipelines"`
}

// GetPipelines returns SearchPipelinesOrganization.Pipelines, and is useful for accessing the field via an interface.
func (v *SearchPipelinesOrganization) GetPipelines() SearchPipelinesOrganizationPipelinesPipelineConnection {
	return v.Pipelines
}

// SearchPipelinesOrganizationPipelinesPipelineConnection includes the requested fields of the GraphQL type PipelineConnection.
type SearchPipelinesOrganizationPipelinesPipelineConnection struct {
	Edges []SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdge `json:"edges"`
}

// GetEdges returns SearchPipelinesOrganizationPipelinesPipelineConnection.Edges, and is useful for accessing the field via an interface.
func (v *SearchPipelinesOrganizationPipelinesPipelineConnection) GetEdges() []SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdge {
	return v.Edges
}

// SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdge includes the requested fields of the GraphQL type PipelineEdge.
type SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdge struct {
	Node SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline `json:"node"`
}

// GetNode returns SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdge.Node, and is useful for accessing the field via an interface.
func (v *SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdge) GetNode() SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline {
	return v.Node
}

// SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline includes the requested fields of the GraphQL type Pipeline.
// The GraphQL type's documentation follows.
//
// A pipeline
type SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline struct {
	Id string `json:"id"`
	// The name of the pipeline
	Name string `json:"name"`
}

// GetId returns SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline.Id, and is useful for accessing the field via an interface.
func (v *SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline) GetId() string {
	return v.Id
}

// GetName returns SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline.Name, and is useful for accessing the field via an interface.
func (v *SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline) GetName() string {
	return v.Name
}

// SearchPipelinesResponse is returned by SearchPipelines on success.
type SearchPipelinesResponse struct {
	// Find an organization by its slug
	Organization SearchPipelinesOrganization `json:"organization"`
}

// GetOrganization returns SearchPipelinesResponse.Organization, and is useful for accessing the field via an interface.
func (v *SearchPipelinesResponse) GetOrganization() SearchPipelinesOrganization {
	return v.Organization
}

// __AgentTokenCreateInput is used internally by genqlient
type __AgentTokenCreateInput struct {
	Input AgentTokenCreateInput `json:"input"`
}

// GetInput returns __AgentTokenCreateInput.Input, and is useful for accessing the field via an interface.
func (v *__AgentTokenCreateInput) GetInput() AgentTokenCreateInput { return v.Input }

// __AgentTokenRevokeInput is used internally by genqlient
type __AgentTokenRevokeInput struct {
	Input AgentTokenRevokeInput `json:"input"`
}

// GetInput returns __AgentTokenRevokeInput.Input, and is useful for accessing the field via an interface.
func (v *__AgentTokenRevokeInput) GetInput() AgentTokenRevokeInput { return v.Input }

// __BuildCancelInput is used internally by genqlient
type __BuildCancelInput struct {
	Input BuildCancelInput `json:"input"`
}

// GetInput returns __BuildCancelInput.Input, and is useful for accessing the field via an interface.
func (v *__BuildCancelInput) GetInput() BuildCancelInput { return v.Input }

// __BuildCreateInput is used internally by genqlient
type __BuildCreateInput struct {
	Input BuildCreateInput `json:"input"`
}

// GetInput returns __BuildCreateInput.Input, and is useful for accessing the field via an interface.
func (v *__BuildCreateInput) GetInput() BuildCreateInput { return v.Input }

// __GetBuildInput is used internally by genqlient
type __GetBuildInput struct {
	Uuid string `json:"uuid"`
}

// GetUuid returns __GetBuildInput.Uuid, and is useful for accessing the field via an interface.
func (v *__GetBuildInput) GetUuid() string { return v.Uuid }

// __GetBuildsInput is used internally by genqlient
type __GetBuildsInput struct {
	Slug  string        `json:"slug"`
	State []BuildStates `json:"state"`
	First int           `json:"first"`
}

// GetSlug returns __GetBuildsInput.Slug, and is useful for accessing the field via an interface.
func (v *__GetBuildsInput) GetSlug() string { return v.Slug }

// GetState returns __GetBuildsInput.State, and is useful for accessing the field via an interface.
func (v *__GetBuildsInput) GetState() []BuildStates { return v.State }

// GetFirst returns __GetBuildsInput.First, and is useful for accessing the field via an interface.
func (v *__GetBuildsInput) GetFirst() int { return v.First }

// __GetOrganizationInput is used internally by genqlient
type __GetOrganizationInput struct {
	Slug string `json:"slug"`
}

// GetSlug returns __GetOrganizationInput.Slug, and is useful for accessing the field via an interface.
func (v *__GetOrganizationInput) GetSlug() string { return v.Slug }

// __GetScheduledBuildsInput is used internally by genqlient
type __GetScheduledBuildsInput struct {
	Slug string `json:"slug"`
}

// GetSlug returns __GetScheduledBuildsInput.Slug, and is useful for accessing the field via an interface.
func (v *__GetScheduledBuildsInput) GetSlug() string { return v.Slug }

// __PipelineCreateInput is used internally by genqlient
type __PipelineCreateInput struct {
	Input PipelineCreateInput `json:"input,omitempty"`
}

// GetInput returns __PipelineCreateInput.Input, and is useful for accessing the field via an interface.
func (v *__PipelineCreateInput) GetInput() PipelineCreateInput { return v.Input }

// __PipelineDeleteInput is used internally by genqlient
type __PipelineDeleteInput struct {
	Input PipelineDeleteInput `json:"input"`
}

// GetInput returns __PipelineDeleteInput.Input, and is useful for accessing the field via an interface.
func (v *__PipelineDeleteInput) GetInput() PipelineDeleteInput { return v.Input }

// __SearchPipelinesInput is used internally by genqlient
type __SearchPipelinesInput struct {
	Slug   string `json:"slug"`
	Search string `json:"search"`
	First  int    `json:"first"`
}

// GetSlug returns __SearchPipelinesInput.Slug, and is useful for accessing the field via an interface.
func (v *__SearchPipelinesInput) GetSlug() string { return v.Slug }

// GetSearch returns __SearchPipelinesInput.Search, and is useful for accessing the field via an interface.
func (v *__SearchPipelinesInput) GetSearch() string { return v.Search }

// GetFirst returns __SearchPipelinesInput.First, and is useful for accessing the field via an interface.
func (v *__SearchPipelinesInput) GetFirst() int { return v.First }

func AgentTokenCreate(
	ctx context.Context,
	client graphql.Client,
	input AgentTokenCreateInput,
) (*AgentTokenCreateResponse, error) {
	req := &graphql.Request{
		OpName: "AgentTokenCreate",
		Query: `
mutation AgentTokenCreate ($input: AgentTokenCreateInput!) {
	agentTokenCreate(input: $input) {
		agentTokenEdge {
			node {
				id
				token
				uuid
			}
		}
	}
}
`,
		Variables: &__AgentTokenCreateInput{
			Input: input,
		},
	}
	var err error

	var data AgentTokenCreateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func AgentTokenRevoke(
	ctx context.Context,
	client graphql.Client,
	input AgentTokenRevokeInput,
) (*AgentTokenRevokeResponse, error) {
	req := &graphql.Request{
		OpName: "AgentTokenRevoke",
		Query: `
mutation AgentTokenRevoke ($input: AgentTokenRevokeInput!) {
	agentTokenRevoke(input: $input) {
		clientMutationId
	}
}
`,
		Variables: &__AgentTokenRevokeInput{
			Input: input,
		},
	}
	var err error

	var data AgentTokenRevokeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func BuildCancel(
	ctx context.Context,
	client graphql.Client,
	input BuildCancelInput,
) (*BuildCancelResponse, error) {
	req := &graphql.Request{
		OpName: "BuildCancel",
		Query: `
mutation BuildCancel ($input: BuildCancelInput!) {
	buildCancel(input: $input) {
		clientMutationId
	}
}
`,
		Variables: &__BuildCancelInput{
			Input: input,
		},
	}
	var err error

	var data BuildCancelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func BuildCreate(
	ctx context.Context,
	client graphql.Client,
	input BuildCreateInput,
) (*BuildCreateResponse, error) {
	req := &graphql.Request{
		OpName: "BuildCreate",
		Query: `
mutation BuildCreate ($input: BuildCreateInput!) {
	buildCreate(input: $input) {
		build {
			uuid
			id
			number
			jobs(first: 100) {
				edges {
					node {
						__typename
						... Job
					}
				}
			}
		}
	}
}
fragment Job on Job {
	... on JobTypeCommand {
		... CommandJob
	}
}
fragment CommandJob on JobTypeCommand {
	uuid
	env
	label
	state
	agentQueryRules
	exitStatus
	scheduledAt
	agent {
		name
	}
}
`,
		Variables: &__BuildCreateInput{
			Input: input,
		},
	}
	var err error

	var data BuildCreateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetBuild(
	ctx context.Context,
	client graphql.Client,
	uuid string,
) (*GetBuildResponse, error) {
	req := &graphql.Request{
		OpName: "GetBuild",
		Query: `
query GetBuild ($uuid: ID!) {
	build(uuid: $uuid) {
		state
	}
}
`,
		Variables: &__GetBuildInput{
			Uuid: uuid,
		},
	}
	var err error

	var data GetBuildResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetBuilds(
	ctx context.Context,
	client graphql.Client,
	slug string,
	state []BuildStates,
	first int,
) (*GetBuildsResponse, error) {
	req := &graphql.Request{
		OpName: "GetBuilds",
		Query: `
query GetBuilds ($slug: ID!, $state: [BuildStates!], $first: Int) {
	pipeline(slug: $slug) {
		builds(state: $state, first: $first) {
			edges {
				node {
					id
				}
			}
		}
	}
}
`,
		Variables: &__GetBuildsInput{
			Slug:  slug,
			State: state,
			First: first,
		},
	}
	var err error

	var data GetBuildsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetOrganization(
	ctx context.Context,
	client graphql.Client,
	slug string,
) (*GetOrganizationResponse, error) {
	req := &graphql.Request{
		OpName: "GetOrganization",
		Query: `
query GetOrganization ($slug: ID!) {
	organization(slug: $slug) {
		id
	}
}
`,
		Variables: &__GetOrganizationInput{
			Slug: slug,
		},
	}
	var err error

	var data GetOrganizationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetScheduledBuilds(
	ctx context.Context,
	client graphql.Client,
	slug string,
) (*GetScheduledBuildsResponse, error) {
	req := &graphql.Request{
		OpName: "GetScheduledBuilds",
		Query: `
query GetScheduledBuilds ($slug: ID!) {
	pipeline(slug: $slug) {
		id
		jobs(state: [SCHEDULED], type: [COMMAND], first: 100, order: RECENTLY_ASSIGNED) {
			count
			edges {
				node {
					__typename
					... Job
				}
			}
		}
	}
}
fragment Job on Job {
	... on JobTypeCommand {
		... CommandJob
	}
}
fragment CommandJob on JobTypeCommand {
	uuid
	env
	label
	state
	agentQueryRules
	exitStatus
	scheduledAt
	agent {
		name
	}
}
`,
		Variables: &__GetScheduledBuildsInput{
			Slug: slug,
		},
	}
	var err error

	var data GetScheduledBuildsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func PipelineCreate(
	ctx context.Context,
	client graphql.Client,
	input PipelineCreateInput,
) (*PipelineCreateResponse, error) {
	req := &graphql.Request{
		OpName: "PipelineCreate",
		Query: `
mutation PipelineCreate ($input: PipelineCreateInput!) {
	pipelineCreate(input: $input) {
		pipeline {
			id
			name
		}
	}
}
`,
		Variables: &__PipelineCreateInput{
			Input: input,
		},
	}
	var err error

	var data PipelineCreateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func PipelineDelete(
	ctx context.Context,
	client graphql.Client,
	input PipelineDeleteInput,
) (*PipelineDeleteResponse, error) {
	req := &graphql.Request{
		OpName: "PipelineDelete",
		Query: `
mutation PipelineDelete ($input: PipelineDeleteInput!) {
	pipelineDelete(input: $input) {
		clientMutationId
	}
}
`,
		Variables: &__PipelineDeleteInput{
			Input: input,
		},
	}
	var err error

	var data PipelineDeleteResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func SearchPipelines(
	ctx context.Context,
	client graphql.Client,
	slug string,
	search string,
	first int,
) (*SearchPipelinesResponse, error) {
	req := &graphql.Request{
		OpName: "SearchPipelines",
		Query: `
query SearchPipelines ($slug: ID!, $search: String!, $first: Int!) {
	organization(slug: $slug) {
		pipelines(search: $search, first: $first) {
			edges {
				node {
					id
					name
				}
			}
		}
	}
}
`,
		Variables: &__SearchPipelinesInput{
			Slug:   slug,
			Search: search,
			First:  first,
		},
	}
	var err error

	var data SearchPipelinesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
